# Finite Volumes Level Set Program

This software uses a naive implementation of the finite volumes discretization method to solve the evolution equations of an
initial level set field. The contact angle is calculated and written to text files. Currently the solution of the evolution equation works in three dimensions, although the calculation of the contact angle and the comparison with the reference solution does not.

Authors:
	Aleksandar Vučković (aleksandar.vuckovic@stud.tu-darmstadt.de)
	Mathis Fricke (fricke@mma.tu-darmstadt.de)

### Dependencies

* g++ (GCC) 8.1.0

## Installation

### Inputfile

All parameters in the Inputfile need to be set in order for the program to work correctly.
The order of the paramters is NOT interchangeable.
The physical parameters have arbitrary units.
They are as follows:
* numX, numY, numZ: Number of cells in the given direction
* lenX, lenY, lenZ: Length of simulation plane in the given direction
The program assumes an equidistant cartesian grid, thus these parameters need to be set accordingly.

* time: The simulation time.
* CFL: Courant-Friedrics-Lewy-number 
* writestepsFraction: Fraction of total timesteps that will be written to disk.
* writeField: Whether to write the levelset field binary files to disk. The files contactAngle.csv and position.csv are always written (see below).
* v0, c1, c2, field: The field and its parameters. For the navier field all three parameters are relevant, but for the shear field, c1 and c2 are ignored and only the value of v0 matters.
* centerX, centerY, centerZ: The initial center of the droplet.
* expcpX, expcpY, expcpZ, expAngle: The expected coordinates for the initial contact point and the expected initial contact angle. Those are used for the reference solutions.

## Compilation

Enter the src/ directory and enter
	make

### Usage

* Validation the numeric and analytic solutions of the differential equations for the contact angle advection problem.

Execute
	./finiteVolumes
Within the same directory you will find the files contactAngle.csv and position.csv. The first column represents the simulation time, the second is the actual value and the third is the reference value.
You will find a folder named data/ as well. It will contain the binary files of the field, its levelset value, velocity field and the XMF file necessary to visualize everything in Paraview (version 5.5 and up).

### Implementation

The program is structured into six files. 

* main.cpp Reads the inputfile and handles the top-level loop which evolves the field with time.
* Field.cpp/hpp: The fundamental field class. Each instance of field represents a equidistant grid of any type parameter.
* LevelSet.cpp/hpp: This class extends Field, instantiated with "double" as its type parameter and obviously represents the levelset field. It is contains most of the important methods such as calculatedNextTimestep and getContactAngle. An object of class LevelSet is instantiated at the beginning within the main() function.
* VelocityField.cpp/hpp: An object of class VelocityField represents a chosen velocity field. It is aware of its parameters type (for example whether it is a shear field with v0 = 2) and the domain it is applicable on.
* velocityFields.cpp/hpp: This is a library that contains the definitions of the velocity fields.
* vecMath3D.cpp/hpp: This is a library of operator overloads and functions for vector analysis.

### Adding a new velocity field

To add a new velocity field, add it and its jacobian matrix to the files velocityFields.cpp and .hpp. Next, add the appropriate if-statement to the VelocityField::at member function.





